Case sensitive dir
satir sonuna genellikle ; konur
identifierlar harf _ veya $ ile baslanabilir
identifierlar camelcase ile yazilir

    console.log ta kullanici birsey gormez sadece console da biz goruruz
    console.log ("Hello world");
    console.warn("Sayilar esit"); console'a sari yazdirir basinda unlem isareti olur
    console.error(ID alani bos birakilamaz); kritik hata olabilecek seylerde bizim ya da 
                   developerin dikkatini cekmek icin kullanilir kirmizi yazdirir

alert=> kullaniciya bilgi vermek
        confirm=>kullanicidan bilgi almak icin
        prompt=> kulanicidan bilgi almak icin kullanilir

<script> icine yazacaksan eger bu sekilde olur
    // yorum satiri

    /*
     coklu yorum satiri ******** 
     */

</script>

js de degisken veya sabit tanimlamak icin 3 farkli ifade kullanilir

   var  =>DEGISKEN   
    let(ES6)=>DEGISKEN 
    const(ES6) =>SABIT


data veri tipleri
String var ad = "ayse";
number var yas = 18;
BigInf var x = 100n; ES11
Boolean var emekli = true;
Symbol var id= Symbol(); ES6
Undefined var isim;
null var isim = null;
Object array, object


typeof methodu degiskenin turunu ogrenmemize yardimci olan methoddur
 
String var ad = "ayse";
console.log(degisken); ==> ayse
console.log(typeof(degisken)); ==> String yazar

** var ile degisken tanimlandiginda ayni isimde baska bir degisken tanimlamasina izin verir

const veya let ile degisken tanimlandiginda ayni scope icinde ayni isimde baska bir degisken tanimanmasina izin vermez.
const degisken = "Ayse";
console.log(degisken); //Ayse
console.log(typeof(degisken)); //String

var degisken =50;  ====>>> bu satirda hata verir
console.log(degisken); 
console.log(typeof(degisken));
 0,null, undefined , NaN ve " " Javascript tarafindan false olarak kabul edilir.
diger degerler Boolean'a cevrildiginde true olarak kabul edilir.


OPERATORLER
1)Aritmetik operatorler 
2)Karsilastirma operatorleri 
3)Mantiksal operatorler 
4)Atama operatorleri 


1) Aritmetik operatorler : + - *(carpma) /(bolme) ** (ust alma) %(modulus-kalan bulma) ++(bir arttirma) --(bir azaltma)

2)Karsilastirma operatorleri :== veya ===, != veya !==, < > <= >=
karsilastirma tiplerinin sonucu herzaman true veya false tur

3)Mantiksal operatorler  and(&&)  or(||) not (!)

4)Atama operatorleri  = += -= *= /= **=(sayinin karesini alip atama) %=(sayinin modunu alma) &=(ve islemi) |=(veya islemi)

innerText =>bir elementin icindeki yaziyi okumak veya degistirmek icinn kullanilir
innerHTML=>Bir elementin icindeki HTML i okumak veya degistirmek icin kullanilir
classList=> bir elementin sahip oldugu class lari manipule etmek icin kullanilir
   add => elemente class eklemek icin
   remove => elementin sahip oldugu class i kaldirmak icin kullanilir

value => bir form elemaninin degerini okumak yada degistirmek icin kullanilir   

OPTIONAL CHAINING
***Object yapilarinda object in olayan elemanlarina erisim saglandiginda hata almamak icin kullanilir!!! 

  const user={
    name :'John,
    age:23
  }
console.log(user?.salary);
bu ? sayesinde hata firlatmasi ve kodun durmasi engellenir.

NULLISH COALIESCING
Sadece NULL ve undefined durumlarini kontrol ederek buna gore aksiyon almamizi saglayan bir operatordur.
Eger ilk parametre null veya undefined degilse ilk parametreyi, yoksa ikinci parametreyi dondurur. 
const user;
alert(user ?? "Anonymous"); => nullish coalescing
 
 const user;
 alert(user !== null && user !== undefined ? user : "Anonymous"); => classic ternary
DONGULER
Tekrarlanan islemleri daha az kod yazarak gerceklestirmek icin donguler kullanilir.
  *for   
  *while    
  *do-while   donguleri vardir.

FONKSIYON NEDIR?
Programda tekrarli calistirilabilecek alt programlara denir.
*kod tekrarinin onune gecer (DRY).
*problemler kucuk parcalara ayrilarak daha kolay cozulur.
*parcalara ayrilan sorun daha fazla insan tarafindan ayni anda cozulur.
*hata ayiklamak daha kolay olur.

SCOPE
Function scope: fonksiyonlarin icinde tanimlanan degiskenler sadece fonksiyon icinde gecerlidir.
Global scope:Her yerden erisilebilen degiskenler en tepede tanimlanir.
Block scope: Sadece tanimlandigi blok icinde(if,for, while...) gecerlidir.ES6
var icin block scope yok Function ve Global scope var. onlar sadece let ve const icin gecerli.
degiskene hicbir tanimlama yapmazsak o degiskeni js default olarak var kabul eder.

Event Handlers
bir programda olabulecek olaylarin yakalanmasi ve olay gerceklestiginde
 istenilen kodlarin calistirilmasi islemine event handling denir. Bu islemi yapan kodlara da event handler denir.
event triggering: bir butona tiklanmasi hadisesi yani tetiklenmesi yada fareyle yaptigi herseydir
event throwing: olayin firlatilmasi
event listening: olan olayin yakalanmasi. kullaniciyi dinliyoruz ve listening ile bunu yakaliyoruz. dinleyen sistem kuruyoruz
event handling:listening e karsi gelen kodlarin yazilmasi.

Number(x) -> x ifadesini numeric tipe cevirir. fakat bosluklari sifir olarak kabul eder.
parseFloat(x) -> x ifadesini decimal(ondalikli) tipe cevirir.Bosluklar NaN kabul edilir.
parsInt(x) -> x ifadesini integer(tam sayinin) tipe cevirir. Bosluklar NaN kabul edilir.
 
 Array Methods
 Dizi elemanlarina ulasmak, bunlari manipule etmek veya iterasyon yapmak icin cesitli hazir methodlar vardir.

 i)mutator Methods: Dizi icerigini degistirilmesini saglar
            push:dizinin sonuna bir veya daha fazla eleman ekler ve yeni eleman sayisini dondurur.
            pop:dizin son elemanini diziden siler ve bu elemani dondurur
            shift:dizin ilk elemanini diziden siler ve bu elemani dondur
            unshift: dizinin ilk indeksine yeni bir eleman ekler ve dizinin yeni eleman sayisini dondurur.
            sort:diziyi yukselen sirada siralar
            reverse:dizinin elemanlarini tersten siralar.
            splice: dizinin iceriklerini yeni ogeler ekleyerek mevcut ogeleri silerek gunceller.
 ii)access methods: Dizi elemanlarina erismek icin kullanilir.
 iii)iterator methods: Dizi elemanlarini dongu yoluyla dolasmak icin kullanilir

 Access Methods
 concat: Dizi ile bir baska diziyi veya degri birlestirerek yeni bir dizi dondurur.
 includes:Dizinin belirtilen bir elemani icerip icermedigine bakar. Eger iceriyorsa true, icermiyorsa false dondurur.
 indexOf:Belirtilen elemanin dizide ilk goruldugu indeks bumarasini dondurur.
 lastIndexOf:Belirtilen elemanin dizide goruldugu en son indeks numarasini dondurur, bulamazsa -1 dondurur.
 join:Bir dizi icerisinde yer alan butun elemanlari birlestirerek String bir ifade olarak geri dondurur.
 toString:Dizinin icerisindeki elemanlari tek bir String olarak dondurur.
 slice:Bir dizinin elemanlarini belirtilen baslangic ve bitis indeksine gore kopyasini olusturarak dondurur.
